{"version":3,"sources":["popup.scss","libs/bootstrap/mixins/_breakpoints.scss","libs/bootstrap/mixins/_clearfix.scss","popup/popup-invite-tender.scss"],"names":[],"mappings":"AAQA,OAGE,gBAAgB,AAChB,mCAFA,AAEuC,cAHvC,AACc,iBADI,CAmEnB,AA9DC,aACE,eAAe,AACf,qBAAsB,AACtB,iBAAkB,CASnB,AC+CC,6BD3DF,aAMI,cAAe,CAMlB,CAAA,AC+CC,4BD3DF,aAUI,cAAe,CAElB,CAAA,AAED,YAEE,mBAAoB,CAiBrB,AAnBA,kBEzBC,WAAW,AACX,WAFA,AAEW,aAFG,CAGf,ADoEC,4BD7CF,YAKI,QAAS,CAcZ,CAAA,AAXC,gBACE,iBAAkB,CAKnB,AAdF,mDAiBG,eAAgB,CACjB,AAGH,YACE,WAAW,AACX,eAAe,AACf,eAAe,AACf,UAAW,CAgBZ,ACIC,4BDxBF,YAOI,WAAW,AAGX,mBAFA,AAEmB,UAFT,AACV,UAAW,CAWd,CAAA,AAPC,eACE,SAAU,CAKX,ACKD,4BDXA,eAII,UAAW,CAEd,CAAA,AGlEL,qBAEE,cAAc,AACd,mBAFA,AAEmB,WAFP,CA6Bb,AFyCG,6BEvEJ,qBAOI,mBADA,AACmB,WADP,CAwBf,CAAA,AFyCG,4BEvEJ,qBAYI,kBADA,AACkB,UADP,CAmBd,CAAA,AA9BD,kCAgBI,kBAAmB,CASpB,AF8CC,6BEvEJ,kCAmBM,kBAAmB,CAMtB,CAAA,AF8CC,4BEvEJ,kCAuBM,kBAAmB,CAEtB,CAAA,AAzBH,yCA4BI,WAAY,CACb","file":"popup.css","sourcesContent":["@import \"variables\";\n@import \"mixin\";\n@import \"extends\";\n\n@import \"libs/bootstrap/functions\";\n@import \"libs/bootstrap/variables\";\n@import \"libs/bootstrap/mixins\";\n\n.popup {\n  position: relative;\n  margin: 0 auto;\n  background: #fff;\n  box-shadow: 0 0 12px rgba(0, 0, 0, 0.2);\n  \n  &__name {\n    font-size: 22px;\n    letter-spacing: 0.36px;\n    text-align: center;\n\n    @include media-breakpoint-down(lt) {\n      font-size: 18px;\n    }\n\n    @include media-breakpoint-down($mobile-switch){\n      font-size: 20px;\n    }\n  }\n  \n  &__row {\n    @include clearfix();\n    margin: 0 -17px 33px;\n\n    @include media-breakpoint-down($mobile-switch){\n      margin: 0;\n    }\n    \n    &_btn {\n      text-align: center;\n\n      .popup__col {\n        margin-bottom: 0;\n      }\n    }\n    \n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n  \n  &__col {\n    float: left;\n    min-height: 1px;\n    padding: 0 17px;\n    width: 100%;\n\n    @include media-breakpoint-down($mobile-switch){\n      float: none;\n      padding: 0;\n      width: auto;\n      margin-bottom: 32px;\n    }\n    \n    &_50 {\n      width: 50%;\n\n      @include media-breakpoint-down($mobile-switch){\n        width: auto;\n      }\n    }\n  }\n  \n  \n  .mfp-close {\n    \n  }\n  \n}\n\n\n@import \"popup/popup-invite-tender\"; /* попап (пригласить в тендер) */","// Breakpoint viewport sizes and media queries.\r\n//\r\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\r\n//\r\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\r\n//\r\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\r\n\r\n// Name of the next breakpoint, or null for the last breakpoint.\r\n//\r\n//    >> breakpoint-next(sm)\r\n//    md\r\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    md\r\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\r\n//    md\r\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\r\n  $n: index($breakpoint-names, $name);\r\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\r\n}\r\n\r\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\r\n//\r\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    576px\r\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\r\n  $min: map-get($breakpoints, $name);\r\n  @return if($min != 0, $min, null);\r\n}\r\n\r\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\r\n// The maximum value is calculated as the minimum of the next one less 0.02px\r\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\r\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\r\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\r\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\r\n//\r\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    767.98px\r\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\r\n  $next: breakpoint-next($name, $breakpoints);\r\n  @return if($next, breakpoint-min($next, $breakpoints) - .02px, null);\r\n}\r\n\r\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\r\n// Useful for making responsive utilities.\r\n//\r\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    \"\"  (Returns a blank string)\r\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\r\n//    \"-sm\"\r\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\r\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\r\n}\r\n\r\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\r\n// Makes the @content apply to the given breakpoint and wider.\r\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\r\n  $min: breakpoint-min($name, $breakpoints);\r\n  @if $min {\r\n    @media (min-width: $min) {\r\n      @content;\r\n    }\r\n  } @else {\r\n    @content;\r\n  }\r\n}\r\n\r\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\r\n// Makes the @content apply to the given breakpoint and narrower.\r\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\r\n  $max: breakpoint-max($name, $breakpoints);\r\n  @if $max {\r\n    @media (max-width: $max) {\r\n      @content;\r\n    }\r\n  } @else {\r\n    @content;\r\n  }\r\n}\r\n\r\n// Media that spans multiple breakpoint widths.\r\n// Makes the @content apply between the min and max breakpoints\r\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\r\n  $min: breakpoint-min($lower, $breakpoints);\r\n  $max: breakpoint-max($upper, $breakpoints);\r\n\r\n  @if $min != null and $max != null {\r\n    @media (min-width: $min) and (max-width: $max) {\r\n      @content;\r\n    }\r\n  } @else if $max == null {\r\n    @include media-breakpoint-up($lower, $breakpoints) {\r\n      @content;\r\n    }\r\n  } @else if $min == null {\r\n    @include media-breakpoint-down($upper, $breakpoints) {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n\r\n// Media between the breakpoint's minimum and maximum widths.\r\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\r\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\r\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\r\n  $min: breakpoint-min($name, $breakpoints);\r\n  $max: breakpoint-max($name, $breakpoints);\r\n\r\n  @if $min != null and $max != null {\r\n    @media (min-width: $min) and (max-width: $max) {\r\n      @content;\r\n    }\r\n  } @else if $max == null {\r\n    @include media-breakpoint-up($name, $breakpoints) {\r\n      @content;\r\n    }\r\n  } @else if $min == null {\r\n    @include media-breakpoint-down($name, $breakpoints) {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n","@mixin clearfix() {\r\n  &::after {\r\n    display: block;\r\n    clear: both;\r\n    content: \"\";\r\n  }\r\n}\r\n","/* попап (пригласить в тендер) */\n\n.popup-invite-tender {\n  width: 950px;\n  margin: 0 auto;\n  padding: 36px 138px;\n  \n  @include media-breakpoint-down(lt) {\n    width: 920px;\n    padding: 36px 122px;\n  }\n  \n  @include media-breakpoint-down($mobile-switch){\n    width: auto;\n    padding: 44px 16px;\n  }\n  \n  .popup__name {\n    margin-bottom: 46px;\n    \n    @include media-breakpoint-down(lt) {\n      margin-bottom: 36px;\n    }\n\n    @include media-breakpoint-down($mobile-switch){\n      margin-bottom: 26px;\n    }\n  }\n  \n  .input-phone_tender {\n    min-width: 0;\n  }\n}"]}